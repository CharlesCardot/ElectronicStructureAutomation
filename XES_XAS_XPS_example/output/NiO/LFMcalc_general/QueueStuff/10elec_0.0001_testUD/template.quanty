-- Material: NiO
-- Date: 2025-05-23 15:22:28.002457 
-- Author: Charles Cardot

-- read the output of FPLO
print("--Read FPLO output--\n")
FPLOOut = FileReadDresdenFPLO("/home/ccardot3/QuantyScripts/automation/XES_XAS_XPS_example/output/NiO/DFT/out.wan")

function print_HDFT(O)
    local m = OperatorToMatrix(O)
    m = Matrix.ToUserdata(Chop(m,1e-3))
	local headers = {"dxy", "dxy", "dyz", "dyz", "dz^2", "dz^2", "dxz", "dxz", "dx2y2", "dx2y2"}
	local output = ""
	for i, str in ipairs(headers) do
	    output = output .. str
	    if i < #headers then
	        output = output .. string.rep(" ", 9 - #str)
	    end
	end
	print("     " .. output)
    print(Matrix.Sub(m, {1,20},{1,20}))
end


-- from the DFT output we can create a tight binding Hamiltonian
print("--Create the Tight Binding Hamiltonian--\n")
print("Create the tight binding Hamiltonian for the crystal\n")
TB = TightBindingDefFromDresdenFPLO(FPLOOut)

-- Sorts cluster so that the TM atom comes first
ClusterTmp = FindAllAtomsInsideSphere(TB.Atoms,TB.Cell,{-0.000000000000000 , -0.000000000000000 , -0.000000000000000},4.62)
print("\n Temp Cluster")
print(ClusterTmp)
Cluster = {}
        for key, atom in pairs(ClusterTmp) do
            if atom[1] == "Ni" then
                Cluster[1] = Copy(atom)
                break
            end
        end
        for key, atom in pairs(ClusterTmp) do
            if atom[1] ~= "Ni" then
                Cluster[#Cluster + 1] = Copy(atom)
            end
        end
        ClusterTmp = nil
print("\n Cluster Sorted")
print(Cluster)

HDFTLarge, ClusterTB = CreateClusterHamiltonian(TB, {"open", Cluster},  {{"AddSpin",true}})

-- NTri = 2 grabs the 3d-3d block and first ligand-ligand block, 
-- giving a total single particle basis of size 20
tri, T2 = BlockBandDiagonalize(OperatorToMatrix(HDFTLarge), 10, {{"NTri", 2}})

HDFT = Rotate(HDFTLarge, T2)
print_HDFT(HDFT)
print(HDFT.NF)
-------------------------------------------------------------------------------------------------------
--Now we want to add the Ni 2p and 1s shell to the system
--New index object (first argument is a list of all orbitals, the second argument groups the two Ni orbitals)
Index, NFermi = CreateAtomicIndicesDict({"Ni_3d","Ligand_d","Ni_2p","Ni_1s"}, {{"Ni",{"Ni_2p","Ni_3d","Ni_1s"}}})
HDFT.NF = NFermi
print(HDFT.NF)
print("The indices of the system are now fixed:")
print(Index)
print("")


-- Next we need to correct for the double counting (i.e. subtract the DFT Mean-field approximation of the Coulomb interaction)
print("--Subtract the DFT Mean-field Coulomb interaction between the d electrons from the tight-binding Hamiltonian--\n")
-- calculate DFT density Matrix in order to create double counting potential
print("Calculate the DFT 1-particle density matrix\n")
rhoNoSpin = Chop(CalculateRho(TB))
-- reduce the matrix to keep only the d shell
rhoNoSpin_d = Matrix.ToTable(Matrix.Sub(rhoNoSpin,5))
-- add spin
rho_d = Matrix.AddSpin(rhoNoSpin_d)
print(rho_d)
rho_d = { { 0.9895874414103 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } ,
{ 0 , 0.9895874414103 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } ,
{ 0 , 0 , 0.98958744141031 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } ,
{ 0 , 0 , 0 , 0.98958744141031 , 0 , 0 , 0 , 0 , 0 , 0 } ,
{ 0 , 0 , 0 , 0 , 0.6650661519633 , 0 , 0 , 0 , 0 , 0 } ,
{ 0 , 0 , 0 , 0 , 0 , 0.6650661519633 , 0 , 0 , 0 , 0 } ,
{ 0 , 0 , 0 , 0 , 0 , 0 , 0.9895874414103 , 0 , 0 , 0 } ,
{ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0.9895874414103 , 0 , 0 } ,
{ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0.66506615196324 , 0 } ,
{ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0.66506615196324 } }

-- create the Coulomb operator on a basis of tesseral Harmonics
print("Create the Coulomb operator for the d-shell\n")
OppF0 = Rotate(NewOperator("U",10,Index["Ni_3d_Up"],Index["Ni_3d_Dn"],{1,0,0}),YtoZMatrix({"d"}))
OppF2 = Rotate(NewOperator("U",10,Index["Ni_3d_Up"],Index["Ni_3d_Dn"],{0,1,0}),YtoZMatrix({"d"}))
OppF4 = Rotate(NewOperator("U",10,Index["Ni_3d_Up"],Index["Ni_3d_Dn"],{0,0,1}),YtoZMatrix({"d"}))

YtoZtriple = YtoZMatrix({"Ni_3d","Ligand_d","Ni_2p","Ni_1s"})

print("Create the Coulomb operator for the s-shell\n")
OppF0sd = Rotate(NewOperator("U", NFermi, Index["Ni_1s_Up"],Index["Ni_1s_Dn"], Index["Ni_3d_Up"],Index["Ni_3d_Dn"], {1}, {0}),YtoZtriple)
OppG2sd = Rotate(NewOperator("U", NFermi, Index["Ni_1s_Up"],Index["Ni_1s_Dn"], Index["Ni_3d_Up"],Index["Ni_3d_Dn"], {0}, {1}),YtoZtriple)

print("Create the Coulomb operator between the p- and d-shell\n")
OppUpdF0 = Rotate(NewOperator("U", NFermi, Index["Ni_2p_Up"],Index["Ni_2p_Dn"], Index["Ni_3d_Up"],Index["Ni_3d_Dn"], {1,0}, {0,0}),YtoZtriple)
OppUpdF2 = Rotate(NewOperator("U", NFermi, Index["Ni_2p_Up"],Index["Ni_2p_Dn"], Index["Ni_3d_Up"],Index["Ni_3d_Dn"], {0,1}, {0,0}),YtoZtriple)
OppUpdG1 = Rotate(NewOperator("U", NFermi, Index["Ni_2p_Up"],Index["Ni_2p_Dn"], Index["Ni_3d_Up"],Index["Ni_3d_Dn"], {0,0}, {1,0}),YtoZtriple)
OppUpdG3 = Rotate(NewOperator("U", NFermi, Index["Ni_2p_Up"],Index["Ni_2p_Dn"], Index["Ni_3d_Up"],Index["Ni_3d_Dn"], {0,0}, {0,1}),YtoZtriple)

-- create the Hartree-Fock mean-field approximation that needs to be substracted from the DFT results
print("Create the Coulomb operator for the d-shell using the mean-field approximation (needs the DFT density)\n")
OppF0MFDFT = Chop(MeanFieldOperator(OppF0,rho_d,{{"AddDFTSelfInteraction",true}}))
OppF2MFDFT = Chop(MeanFieldOperator(OppF2,rho_d,{{"AddDFTSelfInteraction",true}}))
OppF4MFDFT = Chop(MeanFieldOperator(OppF4,rho_d,{{"AddDFTSelfInteraction",true}}))

-- change the dimension of the Coulomb operator the work on a space that includes both the d and the ligand orbitals
--The operators acting on the d- and p-shell furthermore need to be rotated
OppF0.NF = NFermi
OppF2.NF = NFermi
OppF4.NF = NFermi
OppF0MFDFT.NF = NFermi
OppF2MFDFT.NF = NFermi
OppF4MFDFT.NF = NFermi


-- set parameters
print("--Set the parameters--\n")
nd = 8
Delta = DDDD
Udd = UUUU
Upd = 1.2*Udd -- based on rule of thumb, see Table II from https://journals.aps.org/prb/abstract/10.1103/PhysRevB.85.165113
Usd = 1.3*Udd
--The slater integrals are calculated using the radial functions generated by FPLO, which can be read within Quanty:
correlatedRadialFunctionss = ReadFPLOBasisFunctions({"1s"},"/home/ccardot3/QuantyScripts/automation/XES_XAS_XPS_example/output/NiO/DFT/+fcor.001.1")
correlatedRadialFunctionsp = ReadFPLOBasisFunctions({"2p"},"/home/ccardot3/QuantyScripts/automation/XES_XAS_XPS_example/output/NiO/DFT/+fcor.001.1")
correlatedRadialFunctionsd = ReadFPLOBasisFunctions({"3d"},"/home/ccardot3/QuantyScripts/automation/XES_XAS_XPS_example/output/NiO/DFT/+fval.001.1")
--The radial functions are saved in two different files, but we need them in the same object:
correlatedRadialFunctions={correlatedRadialFunctionss[1],correlatedRadialFunctionsp[1],correlatedRadialFunctionsd[1]}
--Now the slater integrals can be calculated
slaterIntegrals = GetSlaterIntegrals({"1s","2p","3d"},correlatedRadialFunctions)

--The resulting object can then be evaluated at the position of interest:
scale = 1.0
F0ddtemp = slaterIntegrals["3d 3d 3d 3d"][0] * EnergyUnits.Ha.value*scale
F2dd = slaterIntegrals["3d 3d 3d 3d"][2] * EnergyUnits.Ha.value*scale
F4dd = slaterIntegrals["3d 3d 3d 3d"][4] * EnergyUnits.Ha.value*scale
F0dd    = Udd+(F2dd+F4dd)*2/63
F0pdtemp = slaterIntegrals["3d 2p 3d 2p"][0] * EnergyUnits.Ha.value*scale
F2pd    =  slaterIntegrals["3d 2p 3d 2p"][2] * EnergyUnits.Ha.value*scale
G1pd    =  slaterIntegrals["2p 3d 3d 2p"][1] * EnergyUnits.Ha.value*scale
G3pd    =  slaterIntegrals["2p 3d 3d 2p"][3] * EnergyUnits.Ha.value*scale
F0pd    = Upd + (1/15)*G1pd + (3/70)*G3pd
F0sdtemp = slaterIntegrals["3d 1s 3d 1s"][0] * EnergyUnits.Ha.value*scale
G2sd    =  slaterIntegrals["1s 3d 3d 1s"][2] * EnergyUnits.Ha.value*scale
F0sd    = Usd

-- Magnetic Field
Bz = 0.1 * EnergyUnits.Tesla.value

-- Exchange Field
mag_moment_dir = {0, 0, 0}
H_mag = 0 -- (eV)
Hx = H_mag * mag_moment_dir[1]
Hy = H_mag * mag_moment_dir[2]
Hz = H_mag * mag_moment_dir[3]

-- Spin orbit
zeta_3d =  0.082586623136141
zeta_2p =  11.505663567558097


------------------------------------------------------------------------
-- Writing out run parameters
------------------------------------------------------------------------
print("Parameters:")
print("nd = "..nd)
print("Delta fit to exp = "..Delta.." eV")
print("Udd fit to exp= "..Udd.." eV")
print("Upd fit to exp = "..Upd.." eV")
print("Usd fit to exp = "..Usd.." eV")
print("Bz = "..Bz.." eV")
print("Hx = "..Hx.." eV")
print("Hy = "..Hy.." eV")
print("Hz = "..Hz.." eV")
print("zeta_3d = "..zeta_3d.." eV")
print("zeta_2p = "..zeta_2p.." eV")
print("")

print("Slater integrals computed from DFT radial wavefunctions:")
print("F0sd ab initio = "..F0sdtemp.." eV")
print("F0dd ab initio = "..F0ddtemp.." eV")
print("F2dd = "..F2dd.." eV")
print("F4dd = "..F4dd.." eV")
print("F0pd ab initio = "..F0pdtemp.." eV")
print("F2pd = "..F2pd.." eV")
print("G1pd = "..G1pd.." eV")
print("G3pd = "..G3pd.." eV")
print("G2sd = "..G2sd.." eV")
print("")

print("Monopole like Slater integrals (from U):")
print("F0dd fit to exp = "..F0dd.." eV")
print("F0pd fit to exp = "..F0pd.." eV")
print("F0sd fit to exp = "..F0sd.." eV")
print("")

function table.val_to_str ( v )
  if "string" == type( v ) then
    v = string.gsub( v, "\n", "\\n" )
    if string.match( string.gsub(v,"[^'\"]",""), '^"+$' ) then
      return "'" .. v .. "'"
    end
    return '"' .. string.gsub(v,'"', '\\"' ) .. '"'
  else
    return "table" == type( v ) and table.tostring( v ) or
      tostring( v )
  end
end

function table.key_to_str ( k )
  if "string" == type( k ) and string.match( k, "^[_%a][_%a%d]*$" ) then
    return k
  else
    return "[" .. table.val_to_str( k ) .. "]"
  end
end

function table.tostring( tbl )
  local result, done = {}, {}
  for k, v in ipairs( tbl ) do
    table.insert( result, table.val_to_str( v ) )
    done[ k ] = true
  end
  for k, v in pairs( tbl ) do
    if not done[ k ] then
      table.insert( result,
        table.key_to_str( k ) .. "=" .. table.val_to_str( v ) )
    end
  end
  return "{" .. table.concat( result, "," ) .. "}"
end



HDFT_temp = OperatorToMatrix(HDFT - F0dd * OppF0MFDFT - F2dd * OppF2MFDFT - F4dd * OppF4MFDFT)
HDFT_temp = Matrix.Sub(HDFT_temp, {1,10},{1,10})
file = io.open("H_10x10.dat", "w")
file:write(table.tostring(HDFT_temp))
file:close()
------------------------------------------------------------------------

print("--Define some additional operators--\n")

OppSx    = Rotate(NewOperator("Sx",   NFermi,Index["Ni_3d_Up"],Index["Ni_3d_Dn"]),YtoZtriple)
OppSy    = Rotate(NewOperator("Sy",   NFermi,Index["Ni_3d_Up"],Index["Ni_3d_Dn"]),YtoZtriple)
OppSz    = Rotate(NewOperator("Sz",   NFermi,Index["Ni_3d_Up"],Index["Ni_3d_Dn"]),YtoZtriple)
OppLz    = Rotate(NewOperator("Lz",   NFermi,Index["Ni_3d_Up"],Index["Ni_3d_Dn"]),YtoZtriple)
OppJz    = Rotate(NewOperator("Jz",   NFermi,Index["Ni_3d_Up"],Index["Ni_3d_Dn"]),YtoZtriple)

Oppldots_3d = Rotate(NewOperator("ldots",NFermi,Index["Ni_3d_Up"],Index["Ni_3d_Dn"]),YtoZtriple)
Oppldots_2p = Rotate(NewOperator("ldots",NFermi,Index["Ni_2p_Up"],Index["Ni_2p_Dn"]),YtoZtriple)

OppSsqr  = Rotate(NewOperator("Ssqr", NFermi,Index["Ni_3d_Up"],Index["Ni_3d_Dn"]),YtoZtriple)
OppLsqr  = Rotate(NewOperator("Lsqr", NFermi,Index["Ni_3d_Up"],Index["Ni_3d_Dn"]),YtoZtriple)
OppJsqr  = Rotate(NewOperator("Jsqr", NFermi,Index["Ni_3d_Up"],Index["Ni_3d_Dn"]),YtoZtriple)

OppN_Ni      = NewOperator("Number",NFermi,Index["Ni"], Index["Ni"], {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1})
OppN_Ligand          = NewOperator("Number",NFermi,Index["Ligand_d"], Index["Ligand_d"], {1,1,1,1,1,1,1,1,1,1})

OppN_Ni_yz   = NewOperator("Number",NFermi,{2,3}, {2,3}, {1,1})
OppN_Ni_xz   = NewOperator("Number",NFermi,{6,7}, {6,7}, {1,1})
OppN_Ni_xy   = NewOperator("Number",NFermi,{0,1}, {0,1}, {1,1})
OppN_Ni_x2y2 = NewOperator("Number",NFermi,{8,9}, {8,9}, {1,1})
OppN_Ni_z2   = NewOperator("Number",NFermi,{4,5}, {4,5}, {1,1})

OppN_Ni_3dUp = NewOperator("Number",NFermi,Index["Ni_3d_Up"],Index["Ni_3d_Up"],{1,1,1,1,1})
OppN_Ni_3dDn = NewOperator("Number",NFermi,Index["Ni_3d_Dn"],Index["Ni_3d_Dn"],{1,1,1,1,1})

OppN_Ni_eg  = OppN_Ni_x2y2 + OppN_Ni_z2
OppN_Ni_t2g = OppN_Ni_yz + OppN_Ni_xz + OppN_Ni_xy

OppD = OppN_Ni_eg + OppN_Ni_t2g


-- XES 2p->1s dipole transition
t=math.sqrt(1/2)
Akm = {{1,-1,t},{1, 1,-t}}
TXESx = Rotate(NewOperator("CF", NFermi, Index["Ni_1s_Up"], Index["Ni_1s_Dn"], Index["Ni_2p_Up"], Index["Ni_2p_Dn"], Akm), YtoZtriple)
Akm = {{1,-1,t*I},{1, 1,t*I}}
TXESy = Rotate(NewOperator("CF", NFermi, Index["Ni_1s_Up"], Index["Ni_1s_Dn"], Index["Ni_2p_Up"], Index["Ni_2p_Dn"], Akm), YtoZtriple)
Akm = {{1,0,1}}
TXESz = Rotate(NewOperator("CF", NFermi, Index["Ni_1s_Up"], Index["Ni_1s_Dn"], Index["Ni_2p_Up"], Index["Ni_2p_Dn"], Akm), YtoZtriple)
 
TXESr = t*(TXESx - I * TXESy)
TXESl =-t*(TXESx + I * TXESy)

-- we can remove zero's from the dipole operator by chopping it
TXESx.Chop()
TXESy.Chop()
TXESz.Chop()
TXESr.Chop()
TXESl.Chop() 


-- XAS 2p->3d dipole transition
t=math.sqrt(1/2)
Akm = {{1,-1,t},{1, 1,-t}}
TXASx = Rotate(NewOperator("CF", NFermi, Index["Ni_3d_Up"], Index["Ni_3d_Dn"], Index["Ni_2p_Up"], Index["Ni_2p_Dn"], Akm), YtoZtriple)
Akm = {{1,-1,t*I},{1, 1,t*I}}
TXASy = Rotate(NewOperator("CF", NFermi, Index["Ni_3d_Up"], Index["Ni_3d_Dn"], Index["Ni_2p_Up"], Index["Ni_2p_Dn"], Akm), YtoZtriple)
Akm = {{1,0,1}}
TXASz = Rotate(NewOperator("CF", NFermi, Index["Ni_3d_Up"], Index["Ni_3d_Dn"], Index["Ni_2p_Up"], Index["Ni_2p_Dn"], Akm), YtoZtriple)
 
TXASr = t*(TXASx - I * TXASy)
TXASl =-t*(TXASx + I * TXASy)

-- we can remove zero's from the dipole operator by chopping it
TXASx.Chop()
TXASy.Chop()
TXASz.Chop()
TXASr.Chop()
TXASl.Chop() 

-- L and R Polarizations, Z Propegation
-----------------------------------------------------------------------
k = {0, 0, 1}
ev = {0, 1, 0}
eh = {1, 0, 0}

er = {t * (eh[1] - I * ev[1]),
      t * (eh[2] - I * ev[2]),
      t * (eh[3] - I * ev[3])}
	  
el = {-t * (eh[1] + I * ev[1]),
      -t * (eh[2] + I * ev[2]),
      -t * (eh[3] + I * ev[3])}

TXASr_zprop = er[1] * TXASx + er[2] * TXASy + er[3] * TXASz
TXASl_zprop = el[1] * TXASx + el[2] * TXASy + el[3] * TXASz
TXASr_zprop.Chop()
TXASl_zprop.Chop()
-----------------------------------------------------------------------

-- L and R Polarizations, Y Propegation
-----------------------------------------------------------------------
k = {0, 1, 0}
ev = {1, 0, 0}
eh = {0, 0, 1}

er = {t * (eh[1] - I * ev[1]),
      t * (eh[2] - I * ev[2]),
      t * (eh[3] - I * ev[3])}
	  
el = {-t * (eh[1] + I * ev[1]),
      -t * (eh[2] + I * ev[2]),
      -t * (eh[3] + I * ev[3])}

TXASr_yprop = er[1] * TXASx + er[2] * TXASy + er[3] * TXASz
TXASl_yprop = el[1] * TXASx + el[2] * TXASy + el[3] * TXASz
TXASr_yprop.Chop()
TXASl_yprop.Chop()
-----------------------------------------------------------------------

-- L and R Polarizations, X Propegation
-----------------------------------------------------------------------
k = {1, 0, 0}
ev = {0, 0, 1}
eh = {0, 1, 0}

er = {t * (eh[1] - I * ev[1]),
      t * (eh[2] - I * ev[2]),
      t * (eh[3] - I * ev[3])}
	  
el = {-t * (eh[1] + I * ev[1]),
      -t * (eh[2] + I * ev[2]),
      -t * (eh[3] + I * ev[3])}

TXASr_xprop = er[1] * TXASx + er[2] * TXASy + er[3] * TXASz
TXASl_xprop = el[1] * TXASx + el[2] * TXASy + el[3] * TXASz
TXASr_xprop.Chop()
TXASl_xprop.Chop()
-----------------------------------------------------------------------

-- defining XPS annhilation operators
OppAnnUp_0 = NewOperator('An', NFermi, Index["Ni_2p_Up"][1])
OppAnnUp_2 = NewOperator('An', NFermi, Index["Ni_2p_Up"][2])
OppAnnUp_4 = NewOperator('An', NFermi, Index["Ni_2p_Up"][3])
OppAnnDn_1 = NewOperator('An', NFermi, Index["Ni_2p_Dn"][1])
OppAnnDn_3 = NewOperator('An', NFermi, Index["Ni_2p_Dn"][2])
OppAnnDn_5 = NewOperator('An', NFermi, Index["Ni_2p_Dn"][3])
-----------------------------------------------------------------------


-- DEFINE ALL HAMILTONIANS
-- define the Ground State Hamiltonian
GS_Hamiltonian = HDFT - F0dd * OppF0MFDFT - F2dd * OppF2MFDFT - F4dd * OppF4MFDFT
            + F0dd * OppF0 + F2dd * OppF2 + F4dd * OppF4
            + Bz * (2*OppSz + OppLz) + zeta_3d * Oppldots_3d

GS_Hamiltonian = GS_Hamiltonian + Hx * OppSx + Hy * OppSy + Hz * OppSz

GS_Hamiltonian = GS_Hamiltonian/2
GS_Hamiltonian = GS_Hamiltonian + ConjugateTranspose(GS_Hamiltonian)

edgs = (10*Delta-nd*(19+nd)*Udd/2)/(10+nd)
eLgs = nd*((1+nd)*Udd/2-Delta)/(10+nd)

OperatorSetTrace(GS_Hamiltonian,edgs,Index["Ni_3d"])
OperatorSetTrace(GS_Hamiltonian,eLgs,Index["Ligand_d"])

-- define the 1s Core Hole State Hamiltonian
print("--Define 1s Core Hole State Hamiltonian--\n")
s_hole_Hamiltonian = HDFT - F0dd * OppF0MFDFT - F2dd * OppF2MFDFT - F4dd * OppF4MFDFT
            + F0dd * OppF0 + F2dd * OppF2 + F4dd * OppF4
            + Bz * (2*OppSz + OppLz) + zeta_3d * Oppldots_3d

s_hole_Hamiltonian = s_hole_Hamiltonian + Hx * OppSx + Hy * OppSy + Hz * OppSz

s_hole_Hamiltonian = s_hole_Hamiltonian + OppF0sd * F0sd + OppG2sd * G2sd
s_hole_Hamiltonian = s_hole_Hamiltonian/2
s_hole_Hamiltonian = s_hole_Hamiltonian + ConjugateTranspose(s_hole_Hamiltonian)

esinter      = -nd*Usd
edinter      = -((-20*Delta + 19*nd*Udd+nd*nd*Udd+40*Usd)/(2*(10+nd)))
eLinter      = nd*((1+nd)*Udd/2 - Delta + 2*Usd)/(10+nd)

OperatorSetTrace(s_hole_Hamiltonian,esinter,Index["Ni_1s"])
OperatorSetTrace(s_hole_Hamiltonian,edinter,Index["Ni_3d"])
OperatorSetTrace(s_hole_Hamiltonian,eLinter,Index["Ligand_d"])

-- define the Final State Hamiltonian           
print("--Define XAS-Hamiltonian--\n")
p_hole_Hamiltonian = HDFT - F0dd * OppF0MFDFT - F2dd * OppF2MFDFT - F4dd * OppF4MFDFT
            + F0dd * OppF0 + F2dd * OppF2 + F4dd * OppF4
            + Bz * (2*OppSz + OppLz) + zeta_3d * Oppldots_3d

p_hole_Hamiltonian = p_hole_Hamiltonian + Hx * OppSx + Hy * OppSy + Hz * OppSz

p_hole_Hamiltonian = p_hole_Hamiltonian + zeta_2p * Oppldots_2p
            + F0pd * OppUpdF0 + F2pd * OppUpdF2 + G1pd * OppUpdG1 + G3pd * OppUpdG3
p_hole_Hamiltonian = p_hole_Hamiltonian/2
p_hole_Hamiltonian = p_hole_Hamiltonian + ConjugateTranspose(p_hole_Hamiltonian)
             
epfinal      = -nd*Upd
edfinal      = -((-20*Delta + 19*nd*Udd + nd*nd*Udd + 120*Upd)/(2*(10 + nd)))
eLfinal      = nd*(-2*Delta + Udd + nd*Udd + 12*Upd)/(2*(10 + nd))

OperatorSetTrace(p_hole_Hamiltonian,epfinal,Index["Ni_2p"])
OperatorSetTrace(p_hole_Hamiltonian,edfinal,Index["Ni_3d"])
OperatorSetTrace(p_hole_Hamiltonian,eLfinal,Index["Ligand_d"])

print("edgs = "..edgs.." eV")
print("eLgs = "..eLgs.." eV")
print("edinter = "..edinter.." eV")
print("eLinter = "..eLinter.." eV")
print("edfinal = "..edfinal.." eV")
print("eLfinal = "..eLfinal.." eV")

----------------------------------------------------------------------------------------
-- Collect operators to take expectation values of
GS_Hamiltonian.Name = "<E>"
s_hole_Hamiltonian.Name = "<E>"
p_hole_Hamiltonian.Name = "<E>"
OppSsqr.Name = "<S^2>"
OppLsqr.Name = "<L^2>"
OppJsqr.Name = "<J^2>"
OppSz.Name = "<S_z^3d>"
OppLz.Name = "<L_z^3d>"
OppJz.Name = "<J_z^3d>"
Oppldots_3d.Name = "<l.s>"
OppN_Ni_eg.Name = "<Neg_Ni>"
OppN_Ni_t2g.Name = "<Nt2g_Ni>"
OppN_Ni.Name = "<N_Ni>"
OppN_Ligand.Name = "<N_L>"
OppD = OppN_Ni_eg + OppN_Ni_t2g
OppD.Name = "<N_Ni_d>"

OppN_Ni_yz.Name = "<3d_yz>"
OppN_Ni_xz.Name = "<3d_xz>"
OppN_Ni_xy.Name = "<3x_xy>"
OppN_Ni_x2y2.Name = "<3d_x2y2>"
OppN_Ni_z2.Name = "<3x_z2>"

OppN_Ni_3dUp.Name = "<N_Ni_dUp>"
OppN_Ni_3dDn.Name = "<N_Ni_dDn>"

GS_oppList={GS_Hamiltonian, OppSz, OppLz, OppJz, OppSsqr, OppLsqr, OppJsqr, 
-- OppN_Ni_eg, OppN_Ni_t2g, OppN_Ni_3dUp, OppN_Ni_3dDn, 
OppN_Ni_yz, OppN_Ni_xz, OppN_Ni_xy, OppN_Ni_x2y2, OppN_Ni_z2,
OppD, OppN_Ni, OppN_Ligand}

s_hole_oppList={s_hole_Hamiltonian, OppSz, OppLz, OppJz, OppSsqr, OppLsqr, OppJsqr, 
-- OppN_Ni_eg, OppN_Ni_t2g, OppN_Ni_3dUp, OppN_Ni_3dDn, 
OppN_Ni_yz, OppN_Ni_xz, OppN_Ni_xy, OppN_Ni_x2y2, OppN_Ni_z2,
OppD, OppN_Ni, OppN_Ligand}
----------------------------------------------------------------------------------------

print("\n--Compute Ground State eigenstates--")
-- we now can create the lowest Npsi eigenstates:
Npsi=5
print("Npsi", Npsi)
StartRestrictions = {NFermi, 0, {DeterminantString(NFermi,Index["Ni_1s"]),2,2},
{DeterminantString(NFermi,Index["Ni_3d"],Index["Ligand_d"]),10+nd,10+nd},
{DeterminantString(NFermi,Index["Ni_2p"]),6,6}}

print("\nGround State Start Restrictions")
print(StartRestrictions)

GS_psilist = Eigensystem(GS_Hamiltonian, StartRestrictions, Npsi, {{'Zero',1e-06},{'Epsilon',1e-06}})
GS_psilist = Chop(GS_psilist)

-- Making sure that all thermally accessible states are included in GS_psilist
T = 293 * EnergyUnits.Kelvin.value
Egrd = GS_psilist[1]*GS_Hamiltonian*GS_psilist[1]
dZ = exp(-(GS_psilist[#GS_psilist] * GS_Hamiltonian * GS_psilist[#GS_psilist] - Egrd)/T)
print("\ndZ")
print(dZ)
while dZ > 0.01 do
    print("\n--Compute eigenstates--")
   
    -- we now can create the lowest Npsi eigenstates:
    Npsi = Npsi + 4
    print("Npsi")
    print(Npsi)
    
    GS_psilist = Eigensystem(GS_Hamiltonian, StartRestrictions, Npsi, {{'Zero',1e-06},{'Epsilon',1e-06}})
    GS_psilist = Chop(GS_psilist)
    
	Egrd = GS_psilist[1]*GS_Hamiltonian*GS_psilist[1]
    dZ = exp(-(GS_psilist[#GS_psilist] * GS_Hamiltonian * GS_psilist[#GS_psilist] - Egrd)/T)

    print("\ndZ")
    print(dZ)
end


print("\n--Compute 1s Corehole eigenstates--")
-- we now can create the lowest Npsi eigenstates:
Npsi=5
print("Npsi", Npsi)
StartRestrictions = {NFermi, 0, {DeterminantString(NFermi,Index["Ni_1s"]),1,1},
{DeterminantString(NFermi,Index["Ni_3d"],Index["Ligand_d"]),10+nd,10+nd},
{DeterminantString(NFermi,Index["Ni_2p"]),6,6}}

print("\n1s Corehole Start Restrictions")
print(StartRestrictions)

s_hole_psilist = Eigensystem(s_hole_Hamiltonian, StartRestrictions, Npsi, {{'Zero',1e-06},{'Epsilon',1e-06}})
s_hole_psilist = Chop(s_hole_psilist)

-- Making sure that all thermally accessible states are included in s_hole_psilist
T = 293 * EnergyUnits.Kelvin.value
Egrd = s_hole_psilist[1]*s_hole_Hamiltonian*s_hole_psilist[1]
dZ = exp(-(s_hole_psilist[#s_hole_psilist] * s_hole_Hamiltonian * s_hole_psilist[#s_hole_psilist] - Egrd)/T)
print("\ndZ")
print(dZ)
while dZ > 0.01 do
    print("\n--Compute eigenstates--")
   
    -- we now can create the lowest Npsi eigenstates:
    Npsi = Npsi + 4
    print("Npsi")
    print(Npsi)
    
    s_hole_psilist = Eigensystem(s_hole_Hamiltonian, StartRestrictions, Npsi, {{'Zero',1e-06},{'Epsilon',1e-06}})
    s_hole_psilist = Chop(s_hole_psilist)
    
	Egrd = s_hole_psilist[1]*s_hole_Hamiltonian*s_hole_psilist[1]
    dZ = exp(-(s_hole_psilist[#s_hole_psilist] * s_hole_Hamiltonian * s_hole_psilist[#s_hole_psilist] - Egrd)/T)

    print("\ndZ")
    print(dZ)
end


print("\n--Ground State Expectation Values--")
PrintExpectationValues(GS_psilist, GS_oppList,{{"ColWidth",10}})


print("\n--1s Corehole State Expectation Values--")
PrintExpectationValues(s_hole_psilist, s_hole_oppList,{{"ColWidth",10}})
---------------------------------------------------------------------------------------------------------------------

print("\n--Create the XES Spectra--\n")

-- Constant Lorentzian Broadening --
------------------------------------
Gamma = 0.1
------------------------------------
----------- For Sticks -------------
Emin = -50
Emax = 50
NE= 4000

epsilon = 0.0001

Spectra_z=0
Spectra_x=0
Spectra_y=0
Egrd = s_hole_psilist[1]*s_hole_Hamiltonian*s_hole_psilist[1]
T = 293 * EnergyUnits.Kelvin.value
Z = 0

for j=1, Npsi do
    dZ = Complex.Re(exp(-(s_hole_psilist[j] * s_hole_Hamiltonian * s_hole_psilist[j] - Egrd)/T))
    print(dZ)
    if dZ < 0.01 then break end
    Z  = Z + dZ
    Spectra_z = Spectra_z + CreateSpectra(p_hole_Hamiltonian, TXESz, s_hole_psilist[j], {{"Emin",Emin}, {"Emax",Emax}, {"NE",NE}, {"Gamma",Gamma}, {"epsilon",epsilon}})*math.exp(-(s_hole_psilist[j]*s_hole_Hamiltonian*s_hole_psilist[j] - Egrd)/T)
    Spectra_x = Spectra_x + CreateSpectra(p_hole_Hamiltonian, TXESx, s_hole_psilist[j], {{"Emin",Emin}, {"Emax",Emax}, {"NE",NE}, {"Gamma",Gamma}, {"epsilon",epsilon}})*math.exp(-(s_hole_psilist[j]*s_hole_Hamiltonian*s_hole_psilist[j] - Egrd)/T)
    Spectra_y = Spectra_y + CreateSpectra(p_hole_Hamiltonian, TXESy, s_hole_psilist[j], {{"Emin",Emin}, {"Emax",Emax}, {"NE",NE}, {"Gamma",Gamma}, {"epsilon",epsilon}})*math.exp(-(s_hole_psilist[j]*s_hole_Hamiltonian*s_hole_psilist[j] - Egrd)/T)
end
Spectra_z = Spectra_z/Z
Spectra_x = Spectra_x/Z
Spectra_y = Spectra_y/Z

XESSpectra = (Spectra_z+Spectra_x+Spectra_y)/3
XESSpectra.Print({{"file", "XES_sticks.dat"}})

XESSpectra.Broaden(0, 1.9)
XESSpectra.Print({{"file", "XES.dat"}})

Spectra_z.Broaden(0, 1.9)
Spectra_x.Broaden(0, 1.9)
Spectra_y.Broaden(0, 1.9)
Spectra_z.Print({{"file", "XES_zpol.dat"}})
Spectra_x.Print({{"file", "XES_xpol.dat"}})
Spectra_y.Print({{"file", "XES_ypol.dat"}})


print("\n--Create the XAS and XPS Spectra--\n")

-- Constant Lorentzian Broadening --
------------------------------------
Gamma = 0.1
------------------------------------
----------- For Sticks -------------
Emin = -50
Emax = 50
NE= 4000

epsilon = 0.00001

Spectra_z=0 -- Linearly Polarized along z
Spectra_x=0 -- Linearly Polarized along x
Spectra_y=0 -- Linearly Polarized along y

Spectra_r_z=0 -- Right Circularly Polarized, propegating along z
Spectra_l_z=0 -- Left Circularly Polarized,  propegating along z
Spectra_r_y=0 -- Right Circularly Polarized, propegating along y
Spectra_l_y=0 -- Left Circularly Polarized,  propegating along y
Spectra_r_x=0 -- Right Circularly Polarized, propegating along x
Spectra_l_x=0 -- Left Circularly Polarized,  propegating along x

Spectra_0=0 -- Annhilation of electron at 0 
Spectra_1=0 -- Annhilation of electron at 1
Spectra_2=0 -- Annhilation of electron at 2
Spectra_3=0 -- Annhilation of electron at 3
Spectra_4=0 -- Annhilation of electron at 4
Spectra_5=0 -- Annhilation of electron at 5

Egrd = GS_psilist[1]*GS_Hamiltonian*GS_psilist[1]
T = 293 * EnergyUnits.Kelvin.value
Z = 0

for j=1, Npsi do
    dZ = Complex.Re(exp(-(GS_psilist[j] * GS_Hamiltonian * GS_psilist[j] - Egrd)/T))
    print(dZ)
    if dZ < 0.01 then break end
    Z  = Z + dZ
    Spectra_z = Spectra_z + CreateSpectra(p_hole_Hamiltonian, TXASz, GS_psilist[j], {{"Emin",Emin}, {"Emax",Emax}, {"NE",NE}, {"Gamma",Gamma}, {"epsilon",epsilon}})*math.exp(-(GS_psilist[j]*GS_Hamiltonian*GS_psilist[j] - Egrd)/T)
    Spectra_x = Spectra_x + CreateSpectra(p_hole_Hamiltonian, TXASx, GS_psilist[j], {{"Emin",Emin}, {"Emax",Emax}, {"NE",NE}, {"Gamma",Gamma}, {"epsilon",epsilon}})*math.exp(-(GS_psilist[j]*GS_Hamiltonian*GS_psilist[j] - Egrd)/T)
    Spectra_y = Spectra_y + CreateSpectra(p_hole_Hamiltonian, TXASy, GS_psilist[j], {{"Emin",Emin}, {"Emax",Emax}, {"NE",NE}, {"Gamma",Gamma}, {"epsilon",epsilon}})*math.exp(-(GS_psilist[j]*GS_Hamiltonian*GS_psilist[j] - Egrd)/T)

    Spectra_r_z = Spectra_r_z + CreateSpectra(p_hole_Hamiltonian, TXASr_zprop, GS_psilist[j], {{"Emin",Emin}, {"Emax",Emax}, {"NE",NE}, {"Gamma",Gamma}, {"epsilon",epsilon}})*math.exp(-(GS_psilist[j]*GS_Hamiltonian*GS_psilist[j] - Egrd)/T)
    Spectra_l_z = Spectra_l_z + CreateSpectra(p_hole_Hamiltonian, TXASl_zprop, GS_psilist[j], {{"Emin",Emin}, {"Emax",Emax}, {"NE",NE}, {"Gamma",Gamma}, {"epsilon",epsilon}})*math.exp(-(GS_psilist[j]*GS_Hamiltonian*GS_psilist[j] - Egrd)/T)
    Spectra_r_y = Spectra_r_y + CreateSpectra(p_hole_Hamiltonian, TXASr_yprop, GS_psilist[j], {{"Emin",Emin}, {"Emax",Emax}, {"NE",NE}, {"Gamma",Gamma}, {"epsilon",epsilon}})*math.exp(-(GS_psilist[j]*GS_Hamiltonian*GS_psilist[j] - Egrd)/T)
    Spectra_l_y = Spectra_l_y + CreateSpectra(p_hole_Hamiltonian, TXASl_yprop, GS_psilist[j], {{"Emin",Emin}, {"Emax",Emax}, {"NE",NE}, {"Gamma",Gamma}, {"epsilon",epsilon}})*math.exp(-(GS_psilist[j]*GS_Hamiltonian*GS_psilist[j] - Egrd)/T)
    Spectra_r_x = Spectra_r_x + CreateSpectra(p_hole_Hamiltonian, TXASr_xprop, GS_psilist[j], {{"Emin",Emin}, {"Emax",Emax}, {"NE",NE}, {"Gamma",Gamma}, {"epsilon",epsilon}})*math.exp(-(GS_psilist[j]*GS_Hamiltonian*GS_psilist[j] - Egrd)/T)
    Spectra_l_x = Spectra_l_x + CreateSpectra(p_hole_Hamiltonian, TXASl_xprop, GS_psilist[j], {{"Emin",Emin}, {"Emax",Emax}, {"NE",NE}, {"Gamma",Gamma}, {"epsilon",epsilon}})*math.exp(-(GS_psilist[j]*GS_Hamiltonian*GS_psilist[j] - Egrd)/T)

    Spectra_0 = Spectra_0 + CreateSpectra(p_hole_Hamiltonian, OppAnnUp_0, GS_psilist[j], {{"Emin",Emin}, {"Emax",Emax}, {"NE",NE}, {"Gamma",Gamma}, {"epsilon",epsilon}})*math.exp(-(GS_psilist[j]*GS_Hamiltonian*GS_psilist[j] - Egrd)/T)
    Spectra_1 = Spectra_1 + CreateSpectra(p_hole_Hamiltonian, OppAnnDn_1, GS_psilist[j], {{"Emin",Emin}, {"Emax",Emax}, {"NE",NE}, {"Gamma",Gamma}, {"epsilon",epsilon}})*math.exp(-(GS_psilist[j]*GS_Hamiltonian*GS_psilist[j] - Egrd)/T)
    Spectra_2 = Spectra_2 + CreateSpectra(p_hole_Hamiltonian, OppAnnUp_2, GS_psilist[j], {{"Emin",Emin}, {"Emax",Emax}, {"NE",NE}, {"Gamma",Gamma}, {"epsilon",epsilon}})*math.exp(-(GS_psilist[j]*GS_Hamiltonian*GS_psilist[j] - Egrd)/T)
    Spectra_3 = Spectra_3 + CreateSpectra(p_hole_Hamiltonian, OppAnnDn_3, GS_psilist[j], {{"Emin",Emin}, {"Emax",Emax}, {"NE",NE}, {"Gamma",Gamma}, {"epsilon",epsilon}})*math.exp(-(GS_psilist[j]*GS_Hamiltonian*GS_psilist[j] - Egrd)/T)
    Spectra_4 = Spectra_4 + CreateSpectra(p_hole_Hamiltonian, OppAnnUp_4, GS_psilist[j], {{"Emin",Emin}, {"Emax",Emax}, {"NE",NE}, {"Gamma",Gamma}, {"epsilon",epsilon}})*math.exp(-(GS_psilist[j]*GS_Hamiltonian*GS_psilist[j] - Egrd)/T)
    Spectra_5 = Spectra_5 + CreateSpectra(p_hole_Hamiltonian, OppAnnDn_5, GS_psilist[j], {{"Emin",Emin}, {"Emax",Emax}, {"NE",NE}, {"Gamma",Gamma}, {"epsilon",epsilon}})*math.exp(-(GS_psilist[j]*GS_Hamiltonian*GS_psilist[j] - Egrd)/T)
end
Spectra_z = Spectra_z/Z
Spectra_x = Spectra_x/Z
Spectra_y = Spectra_y/Z

Spectra_r_z = Spectra_r_z/Z
Spectra_l_z = Spectra_l_z/Z
Spectra_r_y = Spectra_r_y/Z
Spectra_l_y = Spectra_l_y/Z
Spectra_r_x = Spectra_r_x/Z
Spectra_l_x = Spectra_l_x/Z

XASSpectra = (Spectra_z+Spectra_x+Spectra_y)/3
XASSpectra.Print({{"file", "XAS_sticks.dat"}})

XASSpectra.Broaden(0, 0.5)
XASSpectra.Print({{"file", "XAS.dat"}})

Spectra_z.Print({{"file", "XAS_zpol_sticks.dat"}})
Spectra_x.Print({{"file", "XAS_xpol_sticks.dat"}})
Spectra_y.Print({{"file", "XAS_ypol_sticks.dat"}})

Spectra_r_z.Print({{"file", "XAS_rpol_zdir_sticks.dat"}})
Spectra_l_z.Print({{"file", "XAS_lpol_zdir_sticks.dat"}})
Spectra_r_y.Print({{"file", "XAS_rpol_ydir_sticks.dat"}})
Spectra_l_y.Print({{"file", "XAS_lpol_ydir_sticks.dat"}})
Spectra_r_x.Print({{"file", "XAS_rpol_xdir_sticks.dat"}})
Spectra_l_x.Print({{"file", "XAS_lpol_xdir_sticks.dat"}})

Spectra_z.Broaden(0, 0.5)
Spectra_x.Broaden(0, 0.5)
Spectra_y.Broaden(0, 0.5)

Spectra_r_z.Broaden(0, 0.5) 
Spectra_l_z.Broaden(0, 0.5)
Spectra_r_y.Broaden(0, 0.5)
Spectra_l_y.Broaden(0, 0.5)
Spectra_r_x.Broaden(0, 0.5)
Spectra_l_x.Broaden(0, 0.5)

Spectra_z.Print({{"file", "XAS_zpol.dat"}})
Spectra_x.Print({{"file", "XAS_xpol.dat"}})
Spectra_y.Print({{"file", "XAS_ypol.dat"}})

Spectra_r_z.Print({{"file", "XAS_rpol_zdir.dat"}})
Spectra_l_z.Print({{"file", "XAS_lpol_zdir.dat"}})
Spectra_r_y.Print({{"file", "XAS_rpol_ydir.dat"}})
Spectra_l_y.Print({{"file", "XAS_lpol_ydir.dat"}})
Spectra_r_x.Print({{"file", "XAS_rpol_xdir.dat"}})
Spectra_l_x.Print({{"file", "XAS_lpol_xdir.dat"}})

Spectra_0 = Spectra_0 / Z 
Spectra_1 = Spectra_1 / Z
Spectra_2 = Spectra_2 / Z
Spectra_3 = Spectra_3 / Z
Spectra_4 = Spectra_4 / Z
Spectra_5 = Spectra_5 / Z

XPSSpectra = (Spectra_0 + Spectra_1 + Spectra_2 + Spectra_3 + Spectra_4 + Spectra_5) / 6
XPSSpectra.Print({{"file", "XPS_sticks.dat"}})

XPSSpectra.Broaden(0, 0.5)
XPSSpectra.Print({{"file", "XPS.dat"}})

print("Finished")

