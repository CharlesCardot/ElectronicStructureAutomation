01-23-2024
Changed automation folder structure to allow for different types of batch jobs to be automated,
instead of just my standard scan over Udd and Delta. Currently working on reworking the
framework, praying I don't fully break anything, and then I'll create an automation framework
for a standard XES calculation and a polarization dependent XES calculation.
	
In the automation_template folder, nothing has been run, and things are just set up barebones.
In automation_template/templates/ you should find folders that can be used to replace
automation_template/wrkdir_template, and allow you to do batch jobs of standard XES, UddAndDelta 
scans, or whatever else I decide to add in the future.

In the automation_scratch folder, this is just a copy of the automation_template folder,
but it's where I actually run batch jobs. Nothing should be stored here permenantly,
and results should always be moved to another directory for storage and later reference.
If you want to check which template is being used, look in the qsub.script that is in the 
template directory. At the top in the comments it should say what the purpose of the
template is (ex: Standard 1s -> 2p Kalpha XES)

The utils folder should stay in the main automation folder, and should hold any
tabulated stuff

The materials_examples folder in the main automation folder is just a place to store .cif and .inp
files to be used when running batch jobs.

01-30-2024
Added FEFF VtC-XES calculation into the FullDipoleXES template, as I want to create
a giant mega figure the the polarized XES for a bunch of different emission lines.
I also updated the spin orbit splitting table to account for configuration, which
can change by ~0.5 eV for a lot of the 3d and 3p levels.

I've also added a TODO list to keep track of features I want to add

03-03-2024
Refactored the automation_template folder to change from having each template relying on the same
write.py files. This means that now each template exists entirely on its own from the others. I have
made a tradeoff between the convienence of having one simple change be immediately implemented in all
pipelines and having the fine-tunability of a dedicated write.py file for a certain pipeline.

Actually fuck that, I went back to having a shared write helper file, but I edited it to copy
the appropriate write files into the current directory when doing execute_all.sh or execute_one.sh
so that I don't unnecesarially populate some templates with every write file. Now, by editing the
execute scripts, I can control which helper files I pull into the directory, and in the future
can maybe have some more fin tuned control over like "VtC-XES from FEFF" write file, versus
"LDOS from FEFF" write file.

10-01-2024
Added a write_LFMcalc_general.py file that may help with faster iteration. I have to specify
some technically useless things in the .inp just to make sure all the flags are defined when
write_LFMcalc_general.py is called, but it is working at least.
